stages:
  - build   # Test if headers build and install (CMake)
  - test    # Test if unit tests pass (CTest)
  - consume # Test if downstream can depend on installs (CMake)

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEPS_DIR:      "$CI_PROJECT_DIR/dependencies"
  BUILD_DIR:     "$CI_PROJECT_DIR/build"
  INSTALL_DIR:   "$CI_PROJECT_DIR/install"
  CMAKE_MINIMUM: "3.1.3"
  CMAKE_LATEST:  "3.21.2"

########################
##                    ##
## Setup environments ##
##                    ##
########################

.toolchain-matrix-minimum:
  image: streamhpc/opencl-sdk-base:ubuntu-18.04-20211006
  parallel:
    matrix:
  # NOTE: Old CMake versions will likely not use cutting-edge compilers
      - C_COMPILER: gcc-7
        CXX_COMPILER: g++-7
      - C_COMPILER: gcc-8
        CXX_COMPILER: g++-8
      - C_COMPILER: clang-8
        CXX_COMPILER: clang++-8
      - C_COMPILER: clang-9
        CXX_COMPILER: clang++-9
      - C_COMPILER: clang-10
        CXX_COMPILER: clang++-10
  before_script:
    - export PATH=/opt/Kitware/CMake/$CMAKE_MINIMUM/bin:$PATH

.toolchain-matrix-latest:
  image: streamhpc/opencl-sdk-base:ubuntu-18.04-20211006
  parallel:
    matrix:
  # NOTE: Cutting edge CMake versions will likely not use old compilers
      - C_COMPILER: gcc-9
        CXX_COMPILER: g++-9
      - C_COMPILER: gcc-10
        CXX_COMPILER: g++-10
      - C_COMPILER: clang-11
        CXX_COMPILER: clang++-11
      - C_COMPILER: clang-12
        CXX_COMPILER: clang++-12
      - C_COMPILER: clang-13
        CXX_COMPILER: clang++-13
  before_script:
    - export PATH=/opt/Kitware/CMake/$CMAKE_LATEST/bin:$PATH


#################
##             ##
## Build stage ##
##             ##
#################

build:cmake-minimum:
  extends: .toolchain-matrix-minimum
  stage: build
  # NOTE 1: CMake creates build and install folders as needed.
  # NOTE 2: Lack of space in -H<folder> -B<folder> is important!
  #         https://stackoverflow.com/a/20611964/1476661
  script:
    # Clone, configure, build, install OpenCL-Headers
    # NOTE: OpenCL-Headers URL set in repo settings
    - git clone
      --depth 1
      --branch initial-ci
      https://gitlab-ci-token:${CI_JOB_TOKEN}@${OPENCL_HEADERS_GIT_URL}
      $DEPS_DIR/OpenCL-Headers
    - cmake
      -G Ninja
      -D CMAKE_C_COMPILER=$C_COMPILER
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TESTING=OFF
      -D CMAKE_INSTALL_PREFIX=$DEPS_DIR/OpenCL-Headers/install
      -B$DEPS_DIR/OpenCL-Headers/build
      -H$DEPS_DIR/OpenCL-Headers
    - cmake
      --build $DEPS_DIR/OpenCL-Headers/build
      --target install
    # Configure, build, install OpenCL-ICD-Loader
    # NOTE: OpenCL-ICD-Loader URL set in repo settings
    - git clone
      --depth 1
      --branch initial-ci
      https://gitlab-ci-token:${CI_JOB_TOKEN}@${OPENCL_ICD_LOADER_GIT_URL}
      $DEPS_DIR/OpenCL-ICD-Loader
    - cmake
      -G Ninja
      -D CMAKE_C_COMPILER=$C_COMPILER
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TESTING=OFF
      -D CMAKE_PREFIX_PATH=$DEPS_DIR/OpenCL-Headers/install
      -D CMAKE_INSTALL_PREFIX=$DEPS_DIR/OpenCL-ICD-Loader/install
      -B$DEPS_DIR/OpenCL-ICD-Loader/build
      -H$DEPS_DIR/OpenCL-ICD-Loader
    - cmake
      --build $DEPS_DIR/OpenCL-ICD-Loader/build
      --target install
    # Configure, build, install OpenCL-CLHPP
    - cmake
      -G Ninja
      -D CMAKE_C_COMPILER=$C_COMPILER
      -D CMAKE_CXX_COMPILER=$CXX_COMPILER
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TESTS=ON
      -D BUILD_EXAMPLES=ON
      -D CMAKE_PREFIX_PATH="$DEPS_DIR/OpenCL-Headers/install;$DEPS_DIR/OpenCL-ICD-Loader/install"
      -D CMAKE_INSTALL_PREFIX=$INSTALL_DIR
      -B$BUILD_DIR
      -H$CI_PROJECT_DIR
    - cmake
      --build $BUILD_DIR
      --target install
  artifacts:
    paths:
      - $BUILD_DIR
      - $INSTALL_DIR
      - $DEPS_DIR/OpenCL-Headers/install
      - $DEPS_DIR/OpenCL-ICD-Loader/install
    exclude:
      - build/**/CMakeFiles/
    expire_in: 2 weeks

build:cmake-latest:
  extends: .toolchain-matrix-latest
  stage: build
  script:
    # Clone, configure, build, install OpenCL-Headers
    # NOTE: OpenCL-Headers URL set in repo settings
    - git clone
      --depth 1
      --branch initial-ci
      https://gitlab-ci-token:${CI_JOB_TOKEN}@${OPENCL_HEADERS_GIT_URL}
      $DEPS_DIR/OpenCL-Headers
    - cmake
      -G "Ninja Multi-Config"
      -D CMAKE_C_COMPILER=$C_COMPILER
      -D BUILD_TESTING=OFF
      -D CMAKE_INSTALL_PREFIX=$DEPS_DIR/OpenCL-Headers/install
      -B $DEPS_DIR/OpenCL-Headers/build
      -S $DEPS_DIR/OpenCL-Headers
    - cmake
      --build $DEPS_DIR/OpenCL-Headers/build
      --config Debug
      --target install
    - cmake
      --build $DEPS_DIR/OpenCL-Headers/build
      --config Release
      --target install
    # Configure, build, install OpenCL-ICD-Loader
    # NOTE: OpenCL-ICD-Loader URL set in repo settings
    - git clone
      --depth 1
      --branch initial-ci
      https://gitlab-ci-token:${CI_JOB_TOKEN}@${OPENCL_ICD_LOADER_GIT_URL}
      $DEPS_DIR/OpenCL-ICD-Loader
    - cmake
      -G "Ninja Multi-Config"
      -D CMAKE_C_COMPILER=$C_COMPILER
      -D BUILD_TESTING=OFF
      -D CMAKE_PREFIX_PATH=$DEPS_DIR/OpenCL-Headers/install
      -D CMAKE_INSTALL_PREFIX=$DEPS_DIR/OpenCL-ICD-Loader/install
      -B $DEPS_DIR/OpenCL-ICD-Loader/build
      -S $DEPS_DIR/OpenCL-ICD-Loader
    - cmake
      --build $DEPS_DIR/OpenCL-ICD-Loader/build
      --config Debug
      --target install
    - cmake
      --build $DEPS_DIR/OpenCL-ICD-Loader/build
      --config Release
      --target install
    # Configure, build, install OpenCL-CLHPP
    - cmake
      -G "Ninja Multi-Config"
      -D CMAKE_C_COMPILER=$C_COMPILER
      -D CMAKE_CXX_COMPILER=$CXX_COMPILER
      -D BUILD_TESTS=ON
      -D BUILD_EXAMPLES=ON
      -D CMAKE_PREFIX_PATH="$DEPS_DIR/OpenCL-Headers/install;$DEPS_DIR/OpenCL-ICD-Loader/install"
      -D CMAKE_INSTALL_PREFIX=$INSTALL_DIR
      -B $BUILD_DIR
      -S $CI_PROJECT_DIR
    - cmake
      --build $BUILD_DIR
      --config Debug
      --target install
    - cmake
      --build $BUILD_DIR
      --config Release
      --target install
  artifacts:
    paths:
      - $BUILD_DIR
      - $INSTALL_DIR
      - $DEPS_DIR/OpenCL-Headers/install
      - $DEPS_DIR/OpenCL-ICD-Loader/install
    exclude:
      - build/**/CMakeFiles/
    expire_in: 2 weeks


################
##            ##
## Test stage ##
##            ##
################

test:cmake-minimum:
  extends: .toolchain-matrix-minimum
  stage: test
  needs:
    - build:cmake-minimum
  # NOTE: CTest has to be invoked from the build folder.
  script:
    - cd $BUILD_DIR
    - ctest --output-on-failure

test:cmake-latest:
  extends: .toolchain-matrix-minimum
  stage: test
  needs:
    - build:cmake-latest
  # NOTE: CTest has to be invoked from the build folder.
  script:
    - cd $BUILD_DIR
    - ctest --output-on-failure -C Debug
    - ctest --output-on-failure -C Release 


###################
##               ##
## Consume stage ##
##               ##
###################

consume:cmake-minimum:
  extends: .toolchain-matrix-minimum
  stage: consume
  needs:
    - build:cmake-minimum
    - test:cmake-minimum
  # NOTE 1: CMake creates build and install folders as needed.
  # NOTE 2: Lack of space in -H<folder> -B<folder> is important!
  #         https://stackoverflow.com/a/20611964/1476661
  script:
    - cmake
      -G Ninja
      -D CMAKE_C_COMPILER=$COMPILER
      -D CMAKE_BUILD_TYPE=Release
      -D CMAKE_PREFIX_PATH="$DEPS_DIR/OpenCL-Headers/install;$DEPS_DIR/OpenCL-ICD-Loader/install;$INSTALL_DIR"
      -B$CI_PROJECT_DIR/downstream/bare
      -H$CI_PROJECT_DIR/tests/pkgconfig/bare
    - cmake
      --build downstream/bare
    - cd downstream/bare ;
      ctest --output-on-failure ;
      cd -
    # Emulate the presence of the SDK
    - cmake -E make_directory $CI_PROJECT_DIR/install/share/cmake/OpenCL
    - echo -e 'include("/builds/Khronos/OpenCL-CLHPP/dependencies/OpenCL-Headers/install/share/cmake/OpenCLHeaders/OpenCLHeadersTargets.cmake")\ninclude("/builds/Khronos/OpenCL-CLHPP/dependencies/OpenCL-Headers/install/share/cmake/OpenCLHeaders/OpenCLHeadersTargets.cmake")\ninclude("${CMAKE_CURRENT_LIST_DIR}/../OpenCLHeadersCpp/OpenCLHeadersCppTargets.cmake")' > $CI_PROJECT_DIR/install/share/cmake/OpenCL/OpenCLConfig.cmake
    - cmake
      -G Ninja
      -D CMAKE_C_COMPILER=$COMPILER
      -D CMAKE_BUILD_TYPE=Release
      -D CMAKE_PREFIX_PATH="$DEPS_DIR/OpenCL-Headers/install;$DEPS_DIR/OpenCL-ICD-Loader/install;$INSTALL_DIR"
      -B$CI_PROJECT_DIR/downstream/sdk
      -H$CI_PROJECT_DIR/tests/pkgconfig/sdk
    - cmake
      --build downstream/sdk
    - cd downstream/sdk ;
      ctest --output-on-failure

consume:cmake-latest:
  extends: .toolchain-matrix-latest
  stage: consume
  needs:
    - build:cmake-latest
    - test:cmake-latest
  script:
    - cmake
      -G "Ninja Multi-Config"
      -D CMAKE_C_COMPILER=$COMPILER
      -D CMAKE_PREFIX_PATH="$DEPS_DIR/OpenCL-Headers/install;$DEPS_DIR/OpenCL-ICD-Loader/install;$INSTALL_DIR"
      -D DRIVER_STUB_PATH=$BUILD_DIR/Debug/libOpenCLDriverStub.so
      -B $CI_PROJECT_DIR/downstream/bare
      -S $CI_PROJECT_DIR/tests/pkgconfig/bare
    - cmake
      --build downstream/bare
      --config Debug
    - cmake
      --build downstream/bare
      --config Release
    - cd downstream/bare
    - ctest --output-on-failure -C Debug
    - ctest --output-on-failure -C Release
    - cd -
    # Emulate the presence of the SDK
    - cmake -E make_directory $CI_PROJECT_DIR/install/share/cmake/OpenCL
    - echo -e 'include("/builds/Khronos/OpenCL-CLHPP/dependencies/OpenCL-Headers/install/share/cmake/OpenCLHeaders/OpenCLHeadersTargets.cmake")\ninclude("/builds/Khronos/OpenCL-CLHPP/dependencies/OpenCL-Headers/install/share/cmake/OpenCLHeaders/OpenCLHeadersTargets.cmake")\ninclude("${CMAKE_CURRENT_LIST_DIR}/../OpenCLHeadersCpp/OpenCLHeadersCppTargets.cmake")' > $CI_PROJECT_DIR/install/share/cmake/OpenCL/OpenCLConfig.cmake
    - cmake
      -G "Ninja Multi-Config"
      -D CMAKE_C_COMPILER=$COMPILER
      -D CMAKE_PREFIX_PATH="$DEPS_DIR/OpenCL-Headers/install;$DEPS_DIR/OpenCL-ICD-Loader/install;$INSTALL_DIR"
      -D DRIVER_STUB_PATH=$BUILD_DIR/Debug/libOpenCLDriverStub.so
      -B $CI_PROJECT_DIR/downstream/sdk
      -S $CI_PROJECT_DIR/tests/pkgconfig/sdk
    - cmake
      --build downstream/sdk
      --config Debug
    - cmake
      --build downstream/sdk
      --config Release
    - cd downstream/sdk
    - ctest --output-on-failure -C Debug
    - ctest --output-on-failure -C Release
