cmake_minimum_required(VERSION 2.6)
project(CLCPP)
enable_testing()

set(SUPPORTS_OPEN_CL_1_0_APIS ON CACHE BOOL "Target supports OpenCL 1.0 APIs")
set(SUPPORTS_OPEN_CL_1_1_APIS ON CACHE BOOL "Target supports OpenCL 1.1 APIs")
set(SUPPORTS_OPEN_CL_1_2_APIS ON CACHE BOOL "Target supports OpenCL 1.2 APIs")
set(SUPPORTS_OPEN_CL_2_0_APIS ON CACHE BOOL "Target supports OpenCL 2.0 APIs")
set(SUPPORTS_OPEN_CL_2_1_APIS ON CACHE BOOL "Target supports OpenCL 2.1 APIs")
set(SUPPORTS_OPEN_CL_2_2_APIS OFF CACHE BOOL "Target supports OpenCL 2.2 APIs")

if (APPLE)
  set(SUPPORTS_OPEN_CL_2_0_APIS OFF)
  set(SUPPORTS_OPEN_CL_2_1_APIS OFF)
  set(SUPPORTS_OPEN_CL_2_2_APIS OFF)  
endif ()

if(DEFINED ENV{AMDAPPSDKROOT})
  set(OPENCL_DIST_DIR $ENV{AMDAPPSDKROOT} CACHE PATH "OpenCL source dir")
  if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    set(OPENCL_LIB_DIR ${OPENCL_DIST_DIR}/lib/x86_64 )
  else( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    set(OPENCL_LIB_DIR ${OPENCL_DIST_DIR}/lib/x86 )
  endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )
elseif(DEFINED ENV{INTELOCLSDKROOT})
  set(OPENCL_DIST_DIR $ENV{INTELOCLSDKROOT} CACHE PATH "OpenCL source dir")
  if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    set(OPENCL_LIB_DIR ${OPENCL_DIST_DIR}/lib/x64 )
  else( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    set(OPENCL_LIB_DIR ${OPENCL_DIST_DIR}/lib/x86 )
  endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )
elseif(APPLE)
    find_library(opencl_library OpenCL)
    set(OPENCL_DIST_DIR ${opencl_library} CACHE PATH "OpenCL source dir")
else()
  set(OPENCL_DIST_DIR "Hello" CACHE PATH "OpenCL source dir")
  if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    set(OPENCL_LIB_DIR "" )
  else( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    set(OPENCL_LIB_DIR "" )
  endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )  
endif()

if( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang" )
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pthread")
endif()

if (APPLE)
  set(OPENCL_INCLUDE_DIR ${OPENCL_DIST_DIR}/Headers CACHE PATH "OpenCL source dir")
else()
  set(OPENCL_INCLUDE_DIR ${OPENCL_DIST_DIR}/include CACHE PATH "OpenCL source dir")
endif()

set(UNITY_DIR $ENV{UNITY_DIR} CACHE PATH "Unity dir")
set(CMOCK_DIR $ENV{CMOCK_DIR} CACHE PATH "CMock dir")

add_subdirectory(docs)
add_subdirectory(include)
add_subdirectory(examples)
add_subdirectory(tests)
